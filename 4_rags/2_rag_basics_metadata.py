# -*- coding: utf-8 -*-
"""2_rag_basics_metadata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eyB9Envyravvn0XLobg-bi_w7qJLkI65
"""

!unzip /content/books.zip
!unzip /content/db.zip

!pip install -U langchain_community chromadb

import os
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain_community.document_loaders import TextLoader
from langchain_community.vectorstores import Chroma
import warnings

warnings.filterwarnings("ignore")

current_dir = os.getcwd()
books_dir = os.path.join(current_dir, "books")
db_dir = os.path.join(current_dir, "db")
persistent_directory = os.path.join(db_dir, "chroma_db_with_metadata")

print(f"Books directory: {books_dir}")
print(f"Persistent directory: {persistent_directory}")

if not os.path.exists(persistent_directory):
  print("Persistent directory does not exist. Initializing vector store...")

  if not os.path.exists(books_dir):
    raise ValueError(f"Books directory does not exist: {books_dir}")

  book_files = [f for f in os.listdir(books_dir) if f.endswith(".txt")]

  documents = []
  for book_file in book_files:
    loader = TextLoader(os.path.join(books_dir, book_file))
    book_docs = loader.load()

    for doc in book_docs:
      doc.metadata = {"source":book_file}
      documents.append(doc)

    text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
    dos = text_splitter.split_documents(documents)

    print("\n--- Document Chunks Information ---")
    print(f"Number of document chunks: {len(dos)}")

    print("\n--- Creating embeddings ---")

    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    print("\n--- Finished creating embeddings ---")

    print("\n--- Creating and persisting vector store ---")
    db = Chroma.from_documents(dos, embeddings, persist_directory=persistent_directory)
    print("\n--- Finished creating and persisting vector store ---")

else:
    print("Vector store already exists. No need to initialize.")

import shutil
shutil.make_archive('/content/db', 'zip', '/content/db')

from google.colab import files
files.download('/content/db.zip')

"""### 2b_rag_basics_metadata"""

current_dir = os.getcwd()
db_dir = os.path.join(current_dir, "db")
persistent_directory = os.path.join(db_dir, "chroma_db_with_metadata")

embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

db = Chroma(persist_directory=persistent_directory, embedding_function=embeddings)

retreiver = db.as_retriever(
    search_type="similarity_score_threshold",
    search_kwargs={"k": 3, "score_threshold": 0.1},
)

relevant_docs = retreiver.invoke("What is the capital of France?")

print("\n--- Relevant Documents ---")
for i, doc in enumerate(relevant_docs, 1):
    print(f"Document {i}:\n{doc.page_content}\n")
    print(f"Source: {doc.metadata['source']}\n")

